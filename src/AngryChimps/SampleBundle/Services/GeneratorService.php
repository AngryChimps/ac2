<?php


namespace AngryChimps\SampleBundle\Services;


use AngryChimps\GuzzleBundle\Services\GuzzleService;
use GuzzleHttp\Post\PostFile;

class GeneratorService {
    /** @var GuzzleService */
    protected $guzzle;

    protected $sessionHeaderName;
    protected $baseUrl;

    protected $sessionId;
    protected $authenticatedUserId;
    protected $providerAdId;
    protected $consumerAdId;

    public function __construct(GuzzleService $guzzleService, $sessionHeaderName, $baseUrl) {
        $this->guzzle = $guzzleService;
        $this->sessionHeaderName = $sessionHeaderName;
        $this->baseUrl = $baseUrl;
    }

    public function generate($folderToProcess = null) {
        if($folderToProcess !== null) {
            $folders = [$folderToProcess];
        }
        else {
            $folders = scandir(__DIR__ . '/../samples');
        }

        foreach($folders as $folder) {
            if($folder === '.' || $folder === '..' || $folder === '_images') {
                continue;
            }

            $files = scandir(__DIR__ . '/../samples/' . $folder);

            foreach($files as $file) {
                if($file === '.' || $file === '..') {
                    continue;
                }

                $yaml = file_get_contents(__DIR__ . '/../samples/' . $folder . '/' . $file);
                $arr = yaml_parse($yaml);

                foreach($arr['steps'] as $step) {
                    switch($step['name']) {
                        case 'session-get':
                            $this->doSessionGetStep();
                            break;
                        case 'signup-registerProviderAd':
                            $this->doSignupRegisterProviderAd($step['payload']);
                            break;
                        case 'signup-registerProviderCompany':
                            $this->doSignupRegisterProviderCompany($step['payload']);
                            break;
                        case 'signup-uploadFirstAdPhoto':
                            $this->doSignupUploadFirstAdPhoto($step['filename']);
                            break;
                        default:
                            throw new \Exception('Unable to process step named: ' . $step['name']);
                    }
                }
            }
        }
    }

    protected function doSessionGetStep() {
        $response = $this->getData('session');
        $arr = $response->json();
        $this->sessionId = $arr['payload']['session_id'];
    }

    protected function doSignupRegisterProviderAd($payload) {
        //Implode the multiple paragraphs into one string
        $payload['ad_description'] = implode("\n", $payload['ad_description']);

        $response = $this->postData('signup/registerProviderAd', $payload);
        $arr = $response->json();
        $this->authenticatedUserId = $arr['payload']['member']['id'];
    }

    protected function doSignupRegisterProviderCompany($payload) {
        //Fill in default or autogenerated values
        $payload['member_id'] = $this->authenticatedUserId;
        $payload['email'] = 'trashiest-' . rand(1, 1000000000) . '@seangallavan.com';
        $payload['password'] = 'abcdabcd';
        $payload['dob'] = '1950-01-01';
        $payload['phone'] = '(415) 555-1212';
        $payload['mobile_phone'] = '(415) 555-1213';

        $response = $this->postData('signup/registerProviderCompany', $payload);
        $arr = $response->json();
        $this->providerAdId = $arr['payload']['providerAd']['id'];
    }

    protected function doSignupUploadFirstAdPhoto($filename) {
        $fullFilename = __DIR__ . '/../samples/_images/' . $filename;
        $this->postFile('signup/uploadFirstAdPhoto', $fullFilename);
    }

    protected function getData($url) {
        try {
            if($this->authenticatedUserId !== null){
                $url = $this->baseUrl . '/' . $url . '?userId=' . $this->authenticatedUserId;
            }
            else {
                $url = $this->baseUrl . '/' . $url;
            }

            $request = $this->guzzle->createRequest('GET', $url, [
                'headers' => [
                    $this->sessionHeaderName => $this->sessionId,
                    'content-type' => 'application/json',
                ],
                'exceptions' => false,
            ]);

            return $this->guzzle->send($request);
        }
        catch(\Exception $ex) {
            //Ignore this exception, we'll test the return status separately
        }
    }

    protected function postData($url, $requestArray) {
        try {
            if($this->authenticatedUserId !== null){
                $url = $this->baseUrl . '/' . $url . '?userId=' . $this->authenticatedUserId;
            }
            else {
                $url = $this->baseUrl . '/' . $url;
            }

            $request = $this->guzzle->createRequest('POST', $url, [
                'headers' => [$this->sessionHeaderName => $this->sessionId,
                    'content-type' => 'application/json'],
                'json' => array('payload' => $requestArray),
                'exceptions' => false,
            ]);

            return $this->guzzle->send($request);
        }
        catch(\Exception $ex) {
            //Ignore this exception, we'll test the return status separately
        }
    }

    protected function postFile($url, $filename) {
        if($this->authenticatedUserId !== null){
            $url = $this->baseUrl . '/' . $url . '?userId=' . $this->authenticatedUserId;
        }
        else {
            $url = $this->baseUrl . '/' . $url;
        }

        $request = $this->guzzle->createRequest('POST', $url, [
            'headers' => [$this->sessionHeaderName => $this->sessionId,
                'content-type' => 'application/json'],
            'body' => array('photo' => fopen($filename, 'r')),
            'exceptions' => false,
        ]);

        return $this->guzzle->send($request);
    }

    protected function putData($url, $requestArray) {
        try {
            if($this->authenticatedUserId !== null){
                $url = $this->baseUrl . '/' . $url . '?userId=' . $this->authenticatedUserId;
            }
            else {
                $url = $this->baseUrl . '/' . $url;
            }

            $request = $this->guzzle->createRequest('PUT', $url, [
                'headers' => [$this->sessionHeaderName => $this->sessionId,
                    'content-type' => 'application/json'],
                'json' => array('payload' => $requestArray),
                'exceptions' => false,
            ]);

            return $this->guzzle->send($request);
        }
        catch(\Exception $ex) {
            //Ignore this exception, we'll test the return status separately
        }
    }

    protected function deleteData($url) {
        try {
            if($this->authenticatedUserId !== null){
                $url = $this->baseUrl . '/' . $url . '?userId=' . $this->authenticatedUserId;
            }
            else {
                $url = $this->baseUrl . '/' . $url;
            }

            $request = $this->guzzle->createRequest('DELETE', $url, [
                'headers' => [$this->sessionHeaderName => $this->sessionId,
                    'content-type' => 'application/json'],
                'exceptions' => false,
            ]);

            return $this->guzzle->send($request);
        }
        catch(\Exception $ex) {
            //Ignore this exception, we'll test the return status separately
        }
    }

    public function reset() {

    }

}