<?php


namespace AC\NormBundle\Tests;


use PHPUnit_Extensions_Database_DataSet_IDataSet;
use PHPUnit_Extensions_Database_DB_IDatabaseConnection;

require_once __DIR__ . '/../vendor/phpunit/phpunit/src/Framework/Assert/Functions.php';

abstract class AbstractPdoTestCase extends \PHPUnit_Extensions_Database_TestCase {
    const REALM = 'mysql';

    private static $objectsForCleanup = array();

     // only instantiate pdo once for test clean-up/fixture load
     private static $pdo = null;

    // only instantiate PHPUnit_Extensions_Database_DB_IDatabaseConnection once per test
    private static $conn = null;

    protected static function addObjectForCleanup($obj) {
        self::$objectsForCleanup[] = $obj;
    }
    /*
     * Returns the test database connection.
     *
     * @return PHPUnit_Extensions_Database_DB_IDatabaseConnection
     */
    final public function getConnection()
    {
        if (self::$conn === null) {
            if (self::$pdo == null) {
                $realms_contents = file_get_contents(__DIR__ . "/config/ac_norm.yml");
                $realms_parsed = yaml_parse($realms_contents);
                $datastores_contents = file_get_contents(__DIR__ . "/config/ac_norm_test.yml");
                $datastores_parsed = yaml_parse($datastores_contents);

                $datastoreName = $realms_parsed['realms'][self::REALM]['primary_datastore'];
                $datastoreInfo = $datastores_parsed['datastores'][$datastoreName];

                self::$pdo = new \PDO('mysql:dbname=' . $datastoreInfo['db_name'] . ';host=' . $datastoreInfo['host']
                    . ';port=' . $datastoreInfo['port'], $datastoreInfo['user'], $datastoreInfo['password']);
            }
            self::$conn = $this->createDefaultDBConnection(self::$pdo, $datastoreInfo['db_name']);
        }

        return self::$conn;
    }

    /**
     * Returns the test dataset.
     *
     * @return PHPUnit_Extensions_Database_DataSet_IDataSet
     */
    protected function getDataSet()
    {
        return $this->createMySQLXMLDataSet(__DIR__ . '/test_data.xml');
    }

    protected function setUp() {
        $conn=$this->getConnection();
        $conn->getConnection()->query("set foreign_key_checks=0");
        parent::setUp();
        $conn->getConnection()->query("set foreign_key_checks=1");
    }

    protected function tearDown()
    {
        foreach(self::$objectsForCleanup as $obj) {
            try {
                $obj->delete();
            }
            catch(\Exception $ex) {
                //Do nothing
            }
        }
        self::$objectsForCleanup = array();

        $conn=$this->getConnection();
        $conn->getConnection()->query("set foreign_key_checks=0");
        parent::tearDown(); // TODO: Change the autogenerated stub
        $conn->getConnection()->query("set foreign_key_checks=1");
    }

} 