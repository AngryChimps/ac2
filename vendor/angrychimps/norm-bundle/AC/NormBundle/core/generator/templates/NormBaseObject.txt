<?php
namespace {{namespace}}\base;

use AC\NormBundle\core\NormBaseObject;

class {{className}}Base extends NormBaseObject {

    /** @var  string */
    protected static $primaryDatastoreName = '{{primaryDatastoreName}}';

    /** @var  string */
    protected static $cacheDatastoreName = '{{cacheDatastoreName}}';

    /** @var  string */
    protected static $realm = '{{realm}}';

    /** @var  string */
    protected static $tableName = '{{tableName}}';

    /** @var string[] */
    protected static $fieldNames = array({{fieldNamesQuotedString}});

    /** @var string[] */
    protected static $fieldTypes = array({{fieldTypesQuotedString}});

    /** @var  string[] */
    protected static $propertyNames = array({{propertyNamesQuotedString}});

    /** @var  string[] */
    protected static $primaryKeyFieldNames = array({{primaryKeyFieldNamesQuotedString}});

    /** @var  string[] */
    protected static $primaryKeyPropertyNames = array({{primaryKeyPropertyNamesQuotedString}});

    /** @var  string[] */
    protected static $autoIncrementFieldName = '{{autoIncrementFieldName}}';

    /** @var  string[] */
    protected static $autoIncrementPropertyName = '{{autoIncrementPropertyName}}';

    /** @var  string[] */
    protected static $autoGenerateFieldName = '{{autoGenerateFieldName}}';

    /** @var  string[] */
    protected static $autoGeneratePropertyName = '{{autoGeneratePropertyName}}';

    /** @var bool */
    protected static $hasPrimaryKey = {{hasPrimaryKey}};

    /** @var bool */
    protected static $hasAutoIncrement = {{hasAutoIncrement}};

    {{#each enums}}
    {{#each values}}
    const {{name}} = {{value}};
    {{/each}}

    {{/each}}

    {{#each properties}}
    /** @var {{type}} */
    public ${{name}};

    {{/each}}

    {{#each foreignKeys}}
    /** @returns {{propertyClassWithNamespace}} */
    public function get{{propertyName}}() {
        if($this->{{propertyName}} === null) {
            $this->load{{propertyName}}();
        }
        return $this->{{propertyName}};
    }

    {{/each}}

    {{#each foreignKeys}}
    protected function load{{propertyName}}() {
        parent::loadProperty('{{propertyName}}', '{{remoteTableName}}', '{{localPropertyIdFieldName}}');
    }

    {{/each}}

    {{#each reverseForeignKeys}}
    /** @returns {{remotePropertyClassWithNamespace}} */
    public function get{{remotePropertyClass}}Collection() {
        if($this->{{remotePropertyClass}} === null) {
            $this->load{{remotePropertyClass}}{{collection}}();
        }
        return $this->{{remotePropertyClass}};
    }

    {{/each}}

    {{#each reverseForeignKeys}}
    protected function load{{remotePropertyClass}}Collection() {
        parent::loadPropertyCollection('{{remotePropertyClass}}', '{{localTableName}}', '{{localColumnName}}', '{{localPropertyIdFieldName}}');
    }

    {{/each}}

    /**
     * @param $pk
     * @return {{fullyQualifiedClassWithPrecedingBackslash}}
     */
    public static function getByPk($pk) {
        return parent::getByPk($pk);
    }

    /**
     * @param $where string The WHERE clause (excluding the word WHERE)
     * @param array $params The parameter count
     * @return {{fullyQualifiedClassWithPrecedingBackslash}}
     */
    public static function getByWhere($where, $params = array()) {
        return parent::getByWhere($where, $params);
    }

    /**
     * @param $sql The complete sql statement with placeholders
     * @param array $params The parameter array to replace placeholders in the sql
     * @return {{fullyQualifiedClassWithPrecedingBackslash}}
     */
    public static function getBySql($sql, $params = array()) {
        return parent::getBySql($sql, $params);
    }

}