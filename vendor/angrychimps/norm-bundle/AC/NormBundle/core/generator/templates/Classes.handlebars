<?php
namespace {{namespace}};

use Riak\Client\Command\DataType\StoreMap;
use Riak\Client\Command\DataType\Builder\StoreMapBuilder;
use Riak\Client\Command\DataType\SetUpdate;
use Riak\Client\Core\Query\Crdt\RiakMap;

{{#each entities}}

class {{objectNameWithoutNamespace}} {
    {{#if usesRiak2}}
    /** @var StoreMapBuilder */
    protected $riakStoreMapBuilder;

    /** @var RiakMap */
    protected $riakMap;

    /** @var array */
    protected $mapValues = [];
    {{/if}}

    {{#each enums}}
    {{#each values}}
    const {{name}} = {{value}};
    {{/each}}
    {{/each}}

    {{#each subclasses}}
    /** @return {{phpType}} */
    public function get{{propertyNameCapitalized}}()
    {
    {{#if usesRiak2}}
        if(!isset($this->mapValues['{{propertyName}}'])) {
            $this->mapValues['{{propertyName}}'] = new {{phpType}}(json_decode($this->getRiakMap()->get('{{name}}'), true));
        }
    {{/if}}
        return $this->mapValues['{{propertyName}}'];
    }
    public function set{{propertyNameCapitalized}}($value)
    {
        if(is_array($value)) {
            $this->mapValues['{{propertyName}}'] = new {{phpType}}($value);
            {{#if usesRiak2}}
            $this->riakStoreMapBuilder->updateRegister('{{name}}', json_encode($value));
            {{/if}}
        }
        elseif(is_object($value)) {
            $this->mapValues['{{propertyName}}'] = $value;
            {{#if usesRiak2}}
            $this->riakStoreMapBuilder->updateRegister('{{name}}', json_encode($value->getAsArray()));
            {{/if}}
        }
        else {
            $value = json_decode($value, true);
            $this->mapValues['{{propertyName}}'] = new {{phpType}}($value);
            {{#if usesRiak2}}
            $this->riakStoreMapBuilder->updateRegister('{{name}}', json_encode($value));
            {{/if}}
        }
    }
    {{/each}}

    {{#each registers}}
    /** @return {{phpType}} */
    public function get{{propertyNameCapitalized}}()
    {
    {{#if usesRiak2}}
        if(!isset($this->mapValues['{{propertyName}}'])) {
            {{#if isDateTime}}
            $this->mapValues['{{propertyName}}'] = new \DateTime($this->getRiakMap()->get('{{name}}'));
            {{else}}
            $this->mapValues['{{propertyName}}'] = ($this->getRiakMap()->get('{{name}}') === null) ? null
                : ({{phpType}}) $this->getRiakMap()->get('{{name}}');
            {{/if}}
        }
    {{/if}}
        return $this->mapValues['{{propertyName}}'];
    }
    public function set{{propertyNameCapitalized}}($value)
    {
        $this->mapValues['{{propertyName}}'] = $value;
    {{#if usesRiak2}}
        {{#if isDateTime}}
        $this->riakStoreMapBuilder->updateRegister('{{name}}', $value->format('c'));
        {{else}}
        $this->riakStoreMapBuilder->updateRegister('{{name}}', $value);
        {{/if}}
    {{/if}}
    }

    {{/each}}
    {{#each flags}}
    public function get{{propertyNameCapitalized}}()
    {
        if(!isset($this->mapValues['{{propertyName}}'])) {
            $this->mapValues['{{propertyName}}'] = (bool) $this->getRiakMap()->get('{{name}}');
        }
        return $this->mapValues['{{propertyName}}'];
    }
    public function set{{propertyNameCapitalized}}($value)
    {
        $this->mapValues['{{propertyName}}'] = (bool) $value;
        $this->getRiakStoreMapBuilder()->updateFlag('{{name}}', $value);
    }

    {{/each}}
    {{#each sets}}
     /** @return {{php_type}} */
    public function get{{propertyNameCapitalized}}()
    {
        if(!isset($this->mapValues['{{propertyName}}'])) {
            if($this->getRiakMap() !== null) {
                 $this->mapValues['{{propertyName}}'] = $this->getRiakMap()->get('{{name}}');
            }
            else {
                $this->mapValues['{{propertyName}}'] = [];
            }
     }
        return $this->mapValues['{{propertyName}}'];
    }
     public function set{{propertyNameCapitalized}}(array $value)
     {
         $this->mapValues['{{propertyName}}'] = (bool) $value;
         $this->getRiakStoreMapBuilder()->updateSet('{{name}}', $value);
     }
    public function addTo{{propertyNameCapitalized}}($value)
    {
        if(!isset($this->mapValues['{{propertyName}}'])) {
            if($this->getRiakMap() !== null) {
                $this->mapValues['{{propertyName}}'] = $this->getRiakMap()->get('{{name}}');
            }
            else {
                $this->mapValues['{{propertyName}}'] = [];
            }
        }

        if(!in_array($value, $this->mapValues['{{propertyName}}'])) {
            $this->mapValues['{{propertyName}}'][] = $value;

            $setUpdate = new SetUpdate();
            $setUpdate->add($value);
            $this->getRiakStoreMapBuilder()->updateSet('{{name}}', $setUpdate);
        }
    }
    public function removeFrom{{propertyNameCapitalized}}($value)
    {
        if(!isset($this->mapValues['{{propertyName}}'])) {
            if($this->getRiakMap() !== null) {
                $this->mapValues['{{propertyName}}'] = $this->getRiakMap()->get('{{name}}');
            }
            else {
                $this->mapValues['{{propertyName}}'] = [];
            }
        }

        if(in_array($value, $this->mapValues['{{propertyName}}'])) {
            $orig = $this->mapValues['{{propertyName}}'];
            $this->mapValues['{{propertyName}}'] = [];
            foreach($orig as $val) {
                if($val !== $value) {
                    $this->mapValues['{{propertyName}}'][] = $val;
                }
            }

            $setUpdate    = new SetUpdate();
            $setUpdate->remove($value);
            $this->getRiakStoreMapBuilder()->updateSet('{{name}}', $setUpdate);
        }
    }
    public function update{{propertyNameCapitalized}}($value)
    {
        $this->mapValues['{{propertyName}}'] = $value;

        $this->getRiakStoreMapBuilder()->updateSet('{{name}}', $value);
    }
    {{/each}}
    {{#each counters}}
    public function get{{propertyNameCapitalized}}()
    {
        if(!isset($this->mapValues['{{propertyName}}'])) {
            $this->mapValues['{{propertyName}}'] = $this->getRiakMap()->get('{{name}}');
        }
        return $this->mapValues['{{propertyName}}'];
    }
    public function set{{propertyNameCapitalized}}($value)
    {
        $this->mapValues['{{propertyName}}'] = (bool) $value;
        $this->getRiakStoreMapBuilder()->updateCounter('{{name}}', $value);
    }
    public function increment{{propertyNameCapitalized}}($delta)
    {
        if(!isset($this->mapValues['{{propertyName}}'])) {
            $this->mapValues['{{propertyName}}'] = $this->getRiakMap()->get('{{name}}');
        }

        $this->mapValues['{{propertyName}}'] += $delta;
        $this->getRiakStoreMapBuilder()->updateCounter('{{name}}', $delta);
    }
    {{/each}}
    {{#each currencies}}
    public function get{{propertyNameCapitalized}}()
    {
        if(!isset($this->mapValues['{{propertyName}}'])) {
            $this->mapValues['{{propertyName}}'] = $this->getRiakMap()->get('{{name}}') / 100;
        }
        return $this->mapValues['{{propertyName}}'];
    }
    public function increment{{propertyNameCapitalized}}($delta)
    {
        if(!isset($this->mapValues['{{propertyName}}'])) {
            $this->mapValues['{{propertyName}}'] = $this->getRiakMap()->get('{{name}}' / 100);
        }

        $this->mapValues['{{propertyName}}'] += $delta;
        $this->getRiakStoreMapBuilder()->updateCounter('{{name}}', $delta * 100);
    }
    {{/each}}

    public function __construct() {
    {{#if usesRiak2}}
        $this->riakStoreMapBuilder = StoreMap::builder();
    {{/if}}
    {{#each defaults}}
        {{{statement}}}
    {{/each}}
    }

    {{#if usesRiak2}}
    /** @returns StoreMapBuilder */
    public function getRiakStoreMapBuilder() {
        return $this->riakStoreMapBuilder;
    }

    public function setRiakStoreMapBuilder(StoreMapBuilder $storeMapBuilder) {
        $this->riakStoreMapBuilder = $storeMapBuilder;
    }

    /** @returns RiakMap */
    public function getRiakMap() {
        return $this->riakMap;
    }

    public function setRiakMap(RiakMap $map) {
        $this->riakMap = $map;
    }
    {{/if}}
}

class {{objectNameWithoutNamespace}}Collection extends \ArrayObject {
}

{{/each}}

{{#each subclasses}}
class {{objectNameWithoutNamespace}} {
    {{#each fields}}
        /** @var {{phpType}} */
        public ${{propertyName}};

    {{/each}}

    public function __construct(array $data = null) {
    {{#each defaults}}
        {{{statement}}}
    {{/each}}

        if($data !== null) {
        {{#each fields}}
        {{#if typeIsSubclass}}
            $this->{{propertyName}} = new {{type}}($data['{{name}}']);
        {{else}}
            $this->{{propertyName}} = $data['{{name}}'];
        {{/if}}
        {{/each}}
        }
    }

    public function getAsArray() {
        $arr = [];
        {{#each fields}}
        {{#if typeIsSubclass}}
        $arr['{{name}}'] = $this->{{propertyName}}->getAsArray();
        {{else}}
        $arr['{{name}}'] = $this->{{propertyName}};
        {{/if}}
        {{/each}}
        return $arr;
    }
}

{{/each}}